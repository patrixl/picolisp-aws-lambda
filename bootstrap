#!/opt/picoLisp/bin/picolisp /opt/picoLisp/lib.l

(load "@lib/misc.l" "@lib/http.l" "@json/json.l" "@awscurl/libawscurl.l" "@runtime.l")

(setq *Handler (sys "_HANDLER")
      *Aws_region  (sys "AWS_REGION")
      *Aws_execution_env  (sys "AWS_EXECUTION_ENV")
      *Aws_function_name  (sys "AWS_LAMBDA_FUNCTION_NAME")
      *Aws_lambda_function_memory_size  (sys "AWS_LAMBDA_FUNCTION_MEMORY_SIZE")
      *Aws_lambda_function_version  (sys "AWS_LAMBDA_FUNCTION_VERSION")
      *Aws_loggroup_name  (sys "AWS_LAMBDA_LOG_GROUP_NAME")
      *Aws_logstream_name  (sys "AWS_LAMBDA_LOG_STREAM_NAME")
      *Aws_access_key  (sys "AWS_ACCESS_KEY_ID")
      *Aws_secret_key  (sys "AWS_SECRET_ACCESS_KEY")
      *Aws_session_token  (sys "AWS_SESSION_TOKEN")
      *Lambda_task_root  (sys "LAMBDA_TASK_ROOT")
      *Lambda_runtime_dir  (sys "LAMBDA_RUNTIME_DIR")
      *Aws_lambda_runtime_api  (sys "AWS_LAMBDA_RUNTIME_API")
      *Tz  (sys "TZ")

      *Lang (sys "LANG")
      *Path (sys "PATH")
      *Ld_library_path (sys "LD_LIBRARY_PATH")

      *Request_id NIL )

# When an error occurs, print it out and notify the runtime API
(de *Err send-error-response)

(de main ()
   (loop
      (cd *Lambda_task_root)

      (let (Script (pack *Lambda_task_root "/" (car (mapcar pack (split (chop *Handler) "."))) ".l")
            Function (cadr (mapcar pack (split (chop *Handler) ".")))
            Temp (in '(mktemp) (till "^J" T))
            Event_data (get-event-data (pack "http://" *Aws_lambda_runtime_api "/2018-06-01/runtime/invocation/next") Temp)
            Headers (parse-headers Temp) )

         (setq *Request_id (get-request-id Headers))

         (finally
            (call 'rm Temp)

            # Load script, run the function and send the response to the runtime API
            (load Script)
            (send-response (pack "http://" *Aws_lambda_runtime_api "/2018-06-01/runtime/invocation/" *Request_id "/response")
               (eval-function Function Event_data Headers) ) ) ) ) )

(main)
(bye)
